name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install lint deps
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt
          pip install ruff

      - name: Ruff
        run: ruff check .

  tests:
    runs-on: ubuntu-latest
    needs: lint
    env:
      PYTHONPATH: ${{ github.workspace }}
      PF2_NO_EVENNIA: "1"
      PYTHONDONTWRITEBYTECODE: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          # speed + coverage across xdist
          pip install pytest-xdist coverage pytest-cov
          pip install -e .

      - name: Show versions (debug)
        run: |
          python -V
          pip -V
          pip list

      - name: Run tests (parallel) with coverage
        run: |
          # Pick ONE of these --cov targets:
          #   --cov=src             (if you use a src/ layout)
          #   --cov=pokemon         (if your top-level package is `pokemon`)
          #   --cov=.               (broad; may include tests unless config omits)
          pytest -q -n auto --dist=loadgroup --durations=25 \
            --cov=src --cov-report=xml:coverage.xml --cov-report=term

      - name: Coverage report
        if: always()
        run: |
          cat > /tmp/_cov_check.py <<'PY'
          import os, xml.etree.ElementTree as ET
          if not os.path.exists("coverage.xml"):
              print("No coverage.xml")
              raise SystemExit(1)
          root = ET.parse("coverage.xml").getroot()
          pkgs = root.findall(".//package")
          print(f"coverage.xml OK; packages={len(pkgs)}")
          PY
          python /tmp/_cov_check.py


      # Optional: upload coverage to a service
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     files: ./coverage.xml
      #     fail_ci_if_error: false
